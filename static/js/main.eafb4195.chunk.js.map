{"version":3,"sources":["Recipes.module.css","Recipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","image","list","calories","Recipe","_ref","title","ingredients","react_default","a","createElement","className","style","map","ingredient","text","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","event","preventDefault","type","value","onChange","target","Recipes","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,OAAA,wBAAAC,MAAA,uBAAAC,KAAA,sBAAAC,SAAA,0OCoBHC,EAjBA,SAAAC,GAA4C,IAA1CJ,EAA0CI,EAA1CJ,MAAOK,EAAmCD,EAAnCC,MAAOH,EAA4BE,EAA5BF,SAAUI,EAAkBF,EAAlBE,YACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMZ,QAClBQ,EAAAC,EAAAC,cAAA,UAAKJ,GAELE,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,0BACKH,EAAYM,IAAI,SAAAC,GAAU,OACvBN,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAMV,MAAOY,EAAWC,SAG/CP,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAMT,UAApB,aAAyCA,GACzCK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,MAAOe,IAAKf,EAAOgB,IAAI,WCwC1CC,SApDH,WAEV,IAFgBC,EAKcC,mBAAS,IALvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKTK,EALSH,EAAA,GAKAI,EALAJ,EAAA,GAAAK,EAMYN,mBAAS,IANrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMTE,EANSD,EAAA,GAMDE,EANCF,EAAA,GAAAG,EAOUV,mBAAS,WAPnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAOTE,EAPSD,EAAA,GAOFE,EAPEF,EAAA,GAShBG,oBAAU,WACRC,KACC,CAACH,IAEJ,IAAMG,EAAU,eAAA9B,EAAAiB,OAAAc,EAAA,EAAAd,CAAAe,EAAA5B,EAAA6B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA5B,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OACSf,EADT,YAAAe,OAZf,WAYe,aAAAA,OAXd,qCAUG,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAGIL,EAASS,OAHb,OAGTR,EAHSE,EAAAK,KAIfvB,EAAWgB,EAAKS,MAJD,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAAlC,EAAA+C,MAAAC,KAAAC,YAAA,GAkBhB,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAM6C,SAVU,SAAAC,GAChBA,EAAMC,iBACNxB,EAASL,GACTC,EAAU,KAOiBlB,UAAU,eACnCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAa+C,KAAK,OAAOC,MAAO/B,EAAQgC,SAfxC,SAAAJ,GACnB3B,EAAU2B,EAAMK,OAAOF,UAgBrBnD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgB+C,KAAK,UAAvC,WAEFlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACda,EAAQX,IAAI,SAAAb,GAAM,OACjBQ,EAAAC,EAAAC,cAACoD,EAAD,CAAQC,IAAK/D,EAAOA,OAAOgE,MAC3B1D,MAAON,EAAOA,OAAOgE,MACrBzD,YAAcP,EAAOA,OAAOO,YAC5BN,MAAOD,EAAOA,OAAOC,MACrBE,SAAUH,EAAOA,OAAOG,iBCrCZ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eafb4195.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipes_recipe__2eNRm\",\"image\":\"Recipes_image__2dIl5\",\"list\":\"Recipes_list__3apei\",\"calories\":\"Recipes_calories__30D7M\"};","import React from 'react';\r\nimport style from './Recipes.module.css';\r\n\r\n\r\nconst Recipe = ({image, title, calories, ingredients }) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            \r\n            <ol>\r\n            <h3>Ingredients:</h3>\r\n                {ingredients.map(ingredient => (\r\n                    <li className={style.list}>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p className={style.calories}>Calories: {calories}</p>\r\n            <img className={style.image} src={image} alt=\"Dish\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipes.js';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"b709b8ec\";\n  const APP_KEY = \"fc673c19a405d85c0f2b3e2a35b23c29\";\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      const data = await response.json();\n      setRecipes(data.hits);      \n    };\n\n    const updateSearch = event => {\n      setSearch(event.target.value);\n    };\n\n    const getSearch = event => {\n      event.preventDefault();\n      setQuery(search);\n      setSearch(\"\");\n    };\n\n\n  return(\n    <div className=\"App\">\n      <h1>Recipes!</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe key={recipe.recipe.label} \n        title={recipe.recipe.label} \n        ingredients ={recipe.recipe.ingredients}\n        image={recipe.recipe.image} \n        calories={recipe.recipe.calories} />\n      ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}